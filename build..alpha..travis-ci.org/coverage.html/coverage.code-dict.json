{"/home/travis/build/npmtest/node-npmtest-fiber/test.js":"/* istanbul instrument in package npmtest_fiber */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fiber/lib.npmtest_fiber.js":"/* istanbul instrument in package npmtest_fiber */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fiber = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fiber = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fiber/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fiber && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fiber */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fiber\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fiber.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fiber.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fiber.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fiber.__dirname + '/lib.npmtest_fiber.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fiber/node_modules/fiber/src/fiber.js":"//     Fiber.js 1.0.4\n//     @Author: Kirollos Risk\n//\n//     Copyright (c) 2012 LinkedIn.\n//     All Rights Reserved. Apache Software License 2.0\n//     http://www.apache.org/licenses/LICENSE-2.0\n\n( function( global ) {\n\n  // Baseline setup\n  // --------------\n\n  // Stores whether the object is being initialized. i.e., whether\n  // to run the `init` function, or not.\n  var initializing = false,\n\n  // Keep a few prototype references around - for speed access,\n  // and saving bytes in the minified version.\n    ArrayProto = Array.prototype,\n\n  // Save the previous value of `Fiber`.\n    previousFiber = global.Fiber;\n\n  // Helper function to copy properties from one object to the other.\n  function copy( from, to ) {\n    var name;\n    for( name in from ) {\n      if( from.hasOwnProperty( name ) ) {\n        to[name] = from[name];\n      }\n    }\n  }\n\n  // The base `Fiber` implementation.\n  function Fiber(){};\n\n  // ###Extend\n  //\n  // Returns a subclass.\n  Fiber.extend = function( fn ) {\n    // Keep a reference to the current prototye.\n    var parent = this.prototype,\n\n    // Invoke the function which will return an object literal used to define\n    // the prototype. Additionally, pass in the parent prototype, which will\n    // allow instances to use it.\n      properties = fn( parent ),\n\n    // Stores the constructor's prototype.\n      proto;\n\n    // The constructor function for a subclass.\n    function child(){\n      if( !initializing ){\n        // Custom initialization is done in the `init` method.\n        this.init.apply( this, arguments );\n        // Prevent susbsequent calls to `init`.\n        // Note: although a `delete this.init` would remove the `init` function from the instance,\n        // it would still exist in its super class' prototype.  Therefore, explicitly set\n        // `init` to `void 0` to obtain the `undefined` primitive value (in case the global's `undefined`\n        // property has been re-assigned).\n        this.init = void 0;\n      }\n    }\n\n    // Instantiate a base class (but only create the instance, without running `init`).\n    // and make every `constructor` instance an instance of `this` and of `constructor`.\n    initializing = true;\n    proto = child.prototype = new this;\n    initializing = false;\n\n    // Add default `init` function, which a class may override; it should call the\n    // super class' `init` function (if it exists);\n    proto.init = function(){\n      if ( typeof parent.init === 'function' ) {\n        parent.init.apply( this, arguments );\n      }\n    };\n\n     // Copy the properties over onto the new prototype.\n    copy( properties, proto );\n\n    // Enforce the constructor to be what we expect.\n    proto.constructor = child;\n\n    // Keep a reference to the parent prototype.\n    // (Note: currently used by decorators and mixins, so that the parent can be inferred).\n    child.__base__ = parent;\n\n     // Make this class extendable.\n    child.extend = Fiber.extend;\n\n    return child;\n  };\n\n  // Utilities\n  // ---------\n\n  // ###Proxy\n  //\n  // Returns a proxy object for accessing base methods with a given context.\n  //\n  // - `base`: the instance' parent class prototype.\n  // - `instance`: a Fiber class instance.\n  //\n  // Overloads:\n  //\n  // - `Fiber.proxy( instance )`\n  // - `Fiber.proxy( base, instance )`\n  //\n  Fiber.proxy = function( base, instance ) {\n    var name,\n      iface = {},\n      wrap;\n\n    // If there's only 1 argument specified, then it is the instance,\n    // thus infer `base` from its constructor.\n    if ( arguments.length === 1 ) {\n      instance = base;\n      base = instance.constructor.__base__;\n    }\n\n    // Returns a function which calls another function with `instance` as\n    // the context.\n    wrap = function( fn ) {\n      return function() {\n        return base[fn].apply( instance, arguments );\n      };\n    };\n\n    // For each function in `base`, create a wrapped version.\n    for( name in base ){\n      if( base.hasOwnProperty( name ) && typeof base[name] === 'function' ){\n        iface[name] = wrap( name );\n      }\n    }\n    return iface;\n  };\n\n  // ###Decorate\n  //\n  // Decorate an instance with given decorator(s).\n  //\n  // - `instance`: a Fiber class instance.\n  // - `decorator[s]`: the argument list of decorator functions.\n  //\n  // Note: when a decorator is executed, the argument passed in is the super class' prototype,\n  // and the context (i.e. the `this` binding) is the instance.\n  //\n  //  *Example usage:*\n  //\n  //     function Decorator( base ) {\n  //       // this === obj\n  //       return {\n  //         greet: function() {\n  //           console.log('hi!');\n  //         }\n  //       };\n  //     }\n  //\n  //     var obj = new Bar(); // Some instance of a Fiber class\n  //     Fiber.decorate(obj, Decorator);\n  //     obj.greet(); // hi!\n  //\n  Fiber.decorate = function( instance /*, decorator[s] */) {\n    var i,\n      // Get the base prototype.\n      base = instance.constructor.__base__,\n      // Get all the decorators in the arguments.\n      decorators = ArrayProto.slice.call( arguments, 1 ),\n      len = decorators.length;\n\n    for( i = 0; i < len; i++ ){\n      copy( decorators[i].call( instance, base ), instance );\n    }\n  };\n\n  // ###Mixin\n  //\n  // Add functionality to a Fiber definition\n  //\n  // - `definition`: a Fiber class definition.\n  // - `mixin[s]`: the argument list of mixins.\n  //\n  // Note: when a mixing is executed, the argument passed in is the super class' prototype\n  // (i.e., the base)\n  //\n  // Overloads:\n  //\n  // - `Fiber.mixin( definition, mix_1 )`\n  // - `Fiber.mixin( definition, mix_1, ..., mix_n )`\n  //\n  // *Example usage:*\n  //\n  //     var Definition = Fiber.extend(function(base) {\n  //       return {\n  //         method1: function(){}\n  //       }\n  //     });\n  //\n  //     function Mixin(base) {\n  //       return {\n  //         method2: function(){}\n  //       }\n  //     }\n  //\n  //     Fiber.mixin(Definition, Mixin);\n  //     var obj = new Definition();\n  //     obj.method2();\n  //\n  Fiber.mixin = function( definition /*, mixin[s] */ ) {\n    var i,\n      // Get the base prototype.\n      base = definition.__base__,\n      // Get all the mixins in the arguments.\n      mixins = ArrayProto.slice.call( arguments, 1 ),\n      len = mixins.length;\n\n    for( i = 0; i < len; i++ ){\n      copy( mixins[i]( base ), definition.prototype );\n    }\n  };\n\n  // ###noConflict\n  //\n  // Run Fiber.js in *noConflict* mode, returning the `fiber` variable to its\n  // previous owner. Returns a reference to the Fiber object.\n  Fiber.noConflict = function() {\n    global.Fiber = previousFiber;\n    return Fiber;\n  };\n\n  // Common JS\n  // --------------\n\n  // Export `Fiber` to Common JS Loader\n  if( typeof module !== 'undefined' ) {\n    if( typeof module.setExports === 'function' ) {\n      module.setExports( Fiber );\n    } else if( module.exports ) {\n      module.exports = Fiber;\n    }\n  } else {\n    global.Fiber = Fiber;\n  }\n\n// Establish the root object: `window` in the browser, or global on the server.\n})( this );\n"}